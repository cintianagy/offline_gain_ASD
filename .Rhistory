xminv = x,
xmaxv = x + violinwidth * (xmax - x)
)
# Make sure it's sorted properly to draw the ouSLine
newdata <- rbind(
plyr::arrange(transform(data, x = xminv), y),
plyr::arrange(transform(data, x = xmaxv), -y)
)
# Close the polygon: set first and last point the same
# Needed for coord_polar and such
newdata <- rbind(newdata, newdata[1, ])
ggplot2:::ggname("geom_flat_violin", GeomPolygon$draw_panel(newdata, panel_scales, coord))
},
draw_key = draw_key_polygon,
default_aes = aes(
weight = 1, colour = "grey20", fill = "white", size = 0.5,
alpha = NA, linetype = "solid"
),
required_aes = c("x", "y")
)
ggplot(study2_SL_VP_long, aes(x = Learning_type, y = Learning_score, fill = factor(Group, levels = c("NTP", "ASD"))), show.legend = FALSE) +
geom_flat_violin(aes(fill = factor(Group, levels = c("NTP", "ASD"))), position = position_nudge(x = .1, y = 0), adjust = 1.5, trim = FALSE, alpha = .5, colour = NA, show.legend = TRUE) +
geom_point(aes(x = as.numeric(Learning_type) - .15, colour = factor(Group, levels = c("NTP", "ASD"))), position = position_jitter(width = .05), size = 1, shape = 20, show.legend = FALSE) +
geom_boxplot(aes(x = Learning_type, y = Learning_score, fill = factor(Group, levels = c("NTP", "ASD"))),outlier.shape = NA, alpha = .5, width = .1, colour = "black", show.legend = FALSE) +
scale_color_manual(values = c("#440154", "#fde725")) +
scale_fill_manual(values = c("#440154", "#fde725")) +
xlab("Measurement type") +
ylab("Mean offline change score (ms)") +
scale_x_discrete(labels = c("Statistical learning", "Visuomotor performance")) +
theme_classic() +
labs(fill = "Group")
#ggsave("raincloud_study2_SL_VP.png")
"%||%" <- function(a, b) {
if (!is.null(a)) a else b
}
geom_flat_violin <- function(mapping = NULL, data = NULL, stat = "ydensity",
position = "dodge", trim = TRUE, scale = "area",
show.legend = NA, inherit.aes = TRUE, ...) {
layer(
data = data,
mapping = mapping,
stat = stat,
geom = GeomFlatViolin,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(
trim = trim,
scale = scale,
...
)
)
}
#' @rdname ggplot2-ggproto
#' @format NULL
#' @usage NULL
#' @export
GeomFlatViolin <-
ggproto("GeomFlatViolin", Geom,
setup_data = function(data, params) {
data$width <- data$width %||%
params$width %||% (resolution(data$x, FALSE) * 0.9)
# ymin, ymax, xmin, and xmax define the bounding rectangle for each group
data %>%
group_by(group) %>%
mutate(
ymin = -90,
ymax = 90,
xmin = x,
xmax = x + width / 2
)
},
draw_group = function(data, panel_scales, coord) {
# Find the points for the line to go all the way around
data <- transform(data,
xminv = x,
xmaxv = x + violinwidth * (xmax - x)
)
# Make sure it's sorted properly to draw the ouSLine
newdata <- rbind(
plyr::arrange(transform(data, x = xminv), y),
plyr::arrange(transform(data, x = xmaxv), -y)
)
# Close the polygon: set first and last point the same
# Needed for coord_polar and such
newdata <- rbind(newdata, newdata[1, ])
ggplot2:::ggname("geom_flat_violin", GeomPolygon$draw_panel(newdata, panel_scales, coord))
},
draw_key = draw_key_polygon,
default_aes = aes(
weight = 1, colour = "grey20", fill = "white", size = 0.5,
alpha = NA, linetype = "solid"
),
required_aes = c("x", "y")
)
ggplot(study2_SL_VP_long, aes(x = Learning_type, y = Learning_score, fill = factor(Group, levels = c("NTP", "ASD"))), show.legend = FALSE) +
geom_flat_violin(aes(fill = factor(Group, levels = c("NTP", "ASD"))), position = position_nudge(x = .1, y = 0), adjust = 1.5, trim = FALSE, alpha = .5, colour = NA, show.legend = TRUE) +
geom_point(aes(x = as.numeric(Learning_type) - .15, colour = factor(Group, levels = c("NTP", "ASD"))), position = position_jitter(width = .05), size = 1, shape = 20, show.legend = FALSE) +
geom_boxplot(aes(x = Learning_type, y = Learning_score, fill = factor(Group, levels = c("NTP", "ASD"))),outlier.shape = NA, alpha = .5, width = .1, colour = "black", show.legend = FALSE) +
scale_color_manual(values = c("#440154", "#fde725")) +
scale_fill_manual(values = c("#440154", "#fde725")) +
xlab("Measurement type") +
ylab("Mean offline change score (ms)") +
scale_x_discrete(labels = c("Statistical learning", "Visuomotor performance")) +
theme_classic() +
labs(fill = "Group")
#ggsave("raincloud_study2_SL_VP.png")
"%||%" <- function(a, b) {
if (!is.null(a)) a else b
}
geom_flat_violin <- function(mapping = NULL, data = NULL, stat = "ydensity",
position = "dodge", trim = TRUE, scale = "area",
show.legend = NA, inherit.aes = TRUE, ...) {
layer(
data = data,
mapping = mapping,
stat = stat,
geom = GeomFlatViolin,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(
trim = trim,
scale = scale,
...
)
)
}
#' @rdname ggplot2-ggproto
#' @format NULL
#' @usage NULL
#' @export
GeomFlatViolin <-
ggproto("GeomFlatViolin", Geom,
setup_data = function(data, params) {
data$width <- data$width %||%
params$width %||% (resolution(data$x, FALSE) * 0.9)
# ymin, ymax, xmin, and xmax define the bounding rectangle for each group
data %>%
group_by(group) %>%
mutate(
ymin = -80,
ymax = 80,
xmin = x,
xmax = x + width / 2
)
},
draw_group = function(data, panel_scales, coord) {
# Find the points for the line to go all the way around
data <- transform(data,
xminv = x,
xmaxv = x + violinwidth * (xmax - x)
)
# Make sure it's sorted properly to draw the ouSLine
newdata <- rbind(
plyr::arrange(transform(data, x = xminv), y),
plyr::arrange(transform(data, x = xmaxv), -y)
)
# Close the polygon: set first and last point the same
# Needed for coord_polar and such
newdata <- rbind(newdata, newdata[1, ])
ggplot2:::ggname("geom_flat_violin", GeomPolygon$draw_panel(newdata, panel_scales, coord))
},
draw_key = draw_key_polygon,
default_aes = aes(
weight = 1, colour = "grey20", fill = "white", size = 0.5,
alpha = NA, linetype = "solid"
),
required_aes = c("x", "y")
)
ggplot(study2_SL_VP_long, aes(x = Learning_type, y = Learning_score, fill = factor(Group, levels = c("NTP", "ASD"))), show.legend = FALSE) +
geom_flat_violin(aes(fill = factor(Group, levels = c("NTP", "ASD"))), position = position_nudge(x = .1, y = 0), adjust = 1.5, trim = FALSE, alpha = .5, colour = NA, show.legend = TRUE) +
geom_point(aes(x = as.numeric(Learning_type) - .15, colour = factor(Group, levels = c("NTP", "ASD"))), position = position_jitter(width = .05), size = 1, shape = 20, show.legend = FALSE) +
geom_boxplot(aes(x = Learning_type, y = Learning_score, fill = factor(Group, levels = c("NTP", "ASD"))),outlier.shape = NA, alpha = .5, width = .1, colour = "black", show.legend = FALSE) +
scale_color_manual(values = c("#440154", "#fde725")) +
scale_fill_manual(values = c("#440154", "#fde725")) +
xlab("Measurement type") +
ylab("Mean offline change score (ms)") +
scale_x_discrete(labels = c("Statistical learning", "Visuomotor performance")) +
theme_classic() +
labs(fill = "Group")
ggsave("raincloud_study2_SL_VP.png")
ggplot(study1_SL_long_block, aes(x = as.numeric(Block), y = rt, colour = factor(Group, levels = c("lower AQ", "higher AQ")))) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = rt - se, ymax = rt + se), width = 0.05, size = 0.2) +
scale_color_manual(values = c("#440154", "#fde725")) +
labs(x = "Block", y = "Statistical learning score (ms)", colour = "Group") +
theme_classic()
ggsave("sm_study1_SL.png")
ggplot(study1_VP_long_block, aes(x = as.numeric(Block), y = rt, colour = factor(Group, levels = c("lower AQ", "higher AQ")))) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = rt - se, ymax = rt + se), width = 0.05, size = 0.2) +
scale_color_manual(values = c("#440154", "#fde725")) +
labs(x = "Block", y = "Visuomotor performance change (ms)", colour = "Group") +
theme_classic()
ggsave("sm_study1_VP.png")
ggplot(study2_SL_long_block, aes(x = as.numeric(Block), y = rt, colour = factor(Group, levels = c("NTP", "ASD")))) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = rt - se, ymax = rt + se), width = 0.05, size = 0.2) +
scale_color_manual(values = c("#440154", "#fde725")) +
labs(x = "Block", y = "Statistical learning score (ms)", colour = "Group") +
theme_classic()
ggsave("sm_study2_SL.png")
ggplot(study2_VP_long_block, aes(x = as.numeric(Block), y = rt, colour = factor(Group, levels = c("NTP", "ASD")))) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = rt - se, ymax = rt + se), width = 0.05, size = 0.2) +
scale_color_manual(values = c("#440154", "#fde725")) +
labs(x = "Block", y = "Visuomotor performance change (ms)", colour = "Learning phase") +
theme_classic()
ggsave("sm_study2_VP.png")
ggplot(study1_visuomotor_perf_long, aes(x = as.numeric(Block), y = rt, color = as.factor(Group))) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = rt - se, ymax = rt + se), width = 0.05, size = 0.2) +
scale_x_continuous(labels = c("1" = "1-5", "2" = "5-10", "3" = "11-15", "4" = "16-20", "5" = "21-25")) +
labs(x = "Blocks", y = "Reaction time (ms)", color = "Group") +
scale_color_manual(values = c("#440154", "#fde725"), labels = c("lower AQ", "higher AQ")) +
theme_classic()
ggsave("sm_study1_visuomotor_perf.png")
ggplot(study2_visuomotor_perf_long, aes(x = as.numeric(Block), y = rt, color = as.factor(Group))) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = rt - se, ymax = rt + se), width = 0.05, size = 0.2) +
scale_x_continuous(labels = c("1" = "1-5", "2" = "5-10", "3" = "11-15", "4" = "16-20")) +
labs(x = "Blocks", y = "Reaction time (ms)", color = "Group") +
scale_color_manual(values = c("#440154", "#fde725"), labels = c("NTP", "ASD")) +
theme_classic()
ggsave("sm_study2_visuomotor_perf.png")
ggplot(study2_VP_long_block, aes(x = as.numeric(Block), y = rt, colour = factor(Group, levels = c("NTP", "ASD")))) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = rt - se, ymax = rt + se), width = 0.05, size = 0.2) +
scale_color_manual(values = c("#440154", "#fde725")) +
labs(x = "Block", y = "Visuomotor performance change (ms)", colour = "Group") +
theme_classic()
ggsave("sm_study2_VP.png")
ggplot(study2_SL_VP_long, aes(x = Learning_type, y = Learning_score, fill = factor(Group, levels = c("NTP", "ASD"))), show.legend = FALSE) +
geom_flat_violin(aes(fill = factor(Group, levels = c("NTP", "ASD"))), position = position_nudge(x = .1, y = 0), adjust = 1.5, trim = FALSE, alpha = .5, colour = NA, show.legend = FALSE) +
geom_point(aes(x = as.numeric(Learning_type) - .15, colour = factor(Group, levels = c("NTP", "ASD"))), position = position_jitter(width = .05), size = 1, shape = 20, show.legend = TRUE) +
geom_boxplot(aes(x = Learning_type, y = Learning_score, fill = factor(Group, levels = c("NTP", "ASD"))),outlier.shape = NA, alpha = .5, width = .1, colour = "black", show.legend = FALSE) +
scale_color_manual(values = c("#440154", "#fde725")) +
scale_fill_manual(values = c("#440154", "#fde725")) +
xlab("Measurement type") +
ylab("Mean offline change score (ms)") +
scale_x_discrete(labels = c("Statistical learning", "Visuomotor performance")) +
theme_classic() +
labs(fill = "Group")
#ggsave("raincloud_study2_SL_VP.png")
ggplot(study2_SL_VP_long, aes(x = Learning_type, y = Learning_score, fill = factor(Group, levels = c("NTP", "ASD"))), show.legend = FALSE) +
geom_flat_violin(aes(fill = factor(Group, levels = c("NTP", "ASD"))), position = position_nudge(x = .1, y = 0), adjust = 1.5, trim = FALSE, alpha = .5, colour = NA, show.legend = FALSE) +
geom_point(aes(x = as.numeric(Learning_type) - .15, colour = factor(Group, levels = c("NTP", "ASD"))), position = position_jitter(width = .05), size = 1, shape = 20, show.legend = FALSE) +
geom_boxplot(aes(x = Learning_type, y = Learning_score, fill = factor(Group, levels = c("NTP", "ASD"))),outlier.shape = NA, alpha = .5, width = .1, colour = "black", show.legend = TRUE) +
scale_color_manual(values = c("#440154", "#fde725")) +
scale_fill_manual(values = c("#440154", "#fde725")) +
xlab("Measurement type") +
ylab("Mean offline change score (ms)") +
scale_x_discrete(labels = c("Statistical learning", "Visuomotor performance")) +
theme_classic() +
labs(fill = "Group")
#ggsave("raincloud_study2_SL_VP.png")
ggplot(study2_SL_VP_long, aes(x = Learning_type, y = Learning_score, fill = factor(Group, levels = c("NTP", "ASD"))), show.legend = FALSE) +
geom_flat_violin(aes(fill = factor(Group, levels = c("NTP", "ASD"))), position = position_nudge(x = .1, y = 0), adjust = 1.5, trim = FALSE, alpha = .5, colour = NA, show.legend = FALSE) +
geom_point(aes(x = as.numeric(Learning_type) - .15, colour = factor(Group, levels = c("NTP", "ASD"))), position = position_jitter(width = .05), size = 1, shape = 20, show.legend = FALSE) +
geom_boxplot(aes(x = Learning_type, y = Learning_score, fill = factor(Group, levels = c("NTP", "ASD"))),outlier.shape = NA, width = .1, colour = "black", show.legend = TRUE) +
scale_color_manual(values = c("#440154", "#fde725")) +
scale_fill_manual(values = c("#440154", "#fde725")) +
xlab("Measurement type") +
ylab("Mean offline change score (ms)") +
scale_x_discrete(labels = c("Statistical learning", "Visuomotor performance")) +
theme_classic() +
labs(fill = "Group")
#ggsave("raincloud_study2_SL_VP.png")
ggplot(study2_SL_VP_long, aes(x = Learning_type, y = Learning_score, fill = factor(Group, levels = c("NTP", "ASD"))), show.legend = FALSE) +
geom_flat_violin(aes(fill = factor(Group, levels = c("NTP", "ASD"))), position = position_nudge(x = .1, y = 0), adjust = 1.5, trim = FALSE, alpha = .5, colour = NA, show.legend = FALSE) +
geom_point(aes(x = as.numeric(Learning_type) - .15, colour = factor(Group, levels = c("NTP", "ASD"))), position = position_jitter(width = .05), size = 1, shape = 20, show.legend = FALSE) +
geom_boxplot(aes(x = Learning_type, y = Learning_score, fill = factor(Group, levels = c("NTP", "ASD"))),outlier.shape = NA, alpha = .2, width = .1, colour = "black", show.legend = TRUE) +
scale_color_manual(values = c("#440154", "#fde725")) +
scale_fill_manual(values = c("#440154", "#fde725")) +
xlab("Measurement type") +
ylab("Mean offline change score (ms)") +
scale_x_discrete(labels = c("Statistical learning", "Visuomotor performance")) +
theme_classic() +
labs(fill = "Group")
#ggsave("raincloud_study2_SL_VP.png")
ggplot(study2_SL_VP_long, aes(x = Learning_type, y = Learning_score, fill = factor(Group, levels = c("NTP", "ASD"))), show.legend = FALSE) +
geom_flat_violin(aes(fill = factor(Group, levels = c("NTP", "ASD"))), position = position_nudge(x = .1, y = 0), adjust = 1.5, trim = FALSE, alpha = .5, colour = NA, show.legend = FALSE) +
geom_point(aes(x = as.numeric(Learning_type) - .15, colour = factor(Group, levels = c("NTP", "ASD"))), position = position_jitter(width = .05), size = 1, shape = 20, show.legend = FALSE) +
geom_boxplot(aes(x = Learning_type, y = Learning_score, fill = factor(Group, levels = c("NTP", "ASD"))),outlier.shape = NA, alpha = .9, width = .1, colour = "black", show.legend = TRUE) +
scale_color_manual(values = c("#440154", "#fde725")) +
scale_fill_manual(values = c("#440154", "#fde725")) +
xlab("Measurement type") +
ylab("Mean offline change score (ms)") +
scale_x_discrete(labels = c("Statistical learning", "Visuomotor performance")) +
theme_classic() +
labs(fill = "Group")
#ggsave("raincloud_study2_SL_VP.png")
ggplot(study2_SL_VP_long, aes(x = Learning_type, y = Learning_score, fill = factor(Group, levels = c("NTP", "ASD"))), show.legend = FALSE) +
geom_flat_violin(aes(fill = factor(Group, levels = c("NTP", "ASD"))), position = position_nudge(x = .1, y = 0), adjust = 1.5, trim = FALSE, alpha = .8, colour = NA, show.legend = TRUE) +
geom_point(aes(x = as.numeric(Learning_type) - .15, colour = factor(Group, levels = c("NTP", "ASD"))), position = position_jitter(width = .05), size = 1, shape = 20, show.legend = FALSE) +
geom_boxplot(aes(x = Learning_type, y = Learning_score, fill = factor(Group, levels = c("NTP", "ASD"))),outlier.shape = NA, alpha = .9, width = .1, colour = "black", show.legend = FALSE) +
scale_color_manual(values = c("#440154", "#fde725")) +
scale_fill_manual(values = c("#440154", "#fde725")) +
xlab("Measurement type") +
ylab("Mean offline change score (ms)") +
scale_x_discrete(labels = c("Statistical learning", "Visuomotor performance")) +
theme_classic() +
labs(fill = "Group")
#ggsave("raincloud_study2_SL_VP.png")
ggplot(study2_SL_VP_long, aes(x = Learning_type, y = Learning_score, fill = factor(Group, levels = c("NTP", "ASD"))), show.legend = FALSE) +
geom_flat_violin(aes(fill = factor(Group, levels = c("NTP", "ASD"))), position = position_nudge(x = .1, y = 0), adjust = 1.5, trim = FALSE, alpha = .7, colour = NA, show.legend = TRUE) +
geom_point(aes(x = as.numeric(Learning_type) - .15, colour = factor(Group, levels = c("NTP", "ASD"))), position = position_jitter(width = .05), size = 1, shape = 20, show.legend = FALSE) +
geom_boxplot(aes(x = Learning_type, y = Learning_score, fill = factor(Group, levels = c("NTP", "ASD"))),outlier.shape = NA, alpha = .9, width = .1, colour = "black", show.legend = FALSE) +
scale_color_manual(values = c("#440154", "#fde725")) +
scale_fill_manual(values = c("#440154", "#fde725")) +
xlab("Measurement type") +
ylab("Mean offline change score (ms)") +
scale_x_discrete(labels = c("Statistical learning", "Visuomotor performance")) +
theme_classic() +
labs(fill = "Group")
#ggsave("raincloud_study2_SL_VP.png")
ggplot(study2_SL_VP_long, aes(x = Learning_type, y = Learning_score, fill = factor(Group, levels = c("NTP", "ASD"))), show.legend = FALSE) +
geom_flat_violin(aes(fill = factor(Group, levels = c("NTP", "ASD"))), position = position_nudge(x = .1, y = 0), adjust = 1.5, trim = FALSE, alpha = .75, colour = NA, show.legend = TRUE) +
geom_point(aes(x = as.numeric(Learning_type) - .15, colour = factor(Group, levels = c("NTP", "ASD"))), position = position_jitter(width = .05), size = 1, shape = 20, show.legend = FALSE) +
geom_boxplot(aes(x = Learning_type, y = Learning_score, fill = factor(Group, levels = c("NTP", "ASD"))),outlier.shape = NA, alpha = .9, width = .1, colour = "black", show.legend = FALSE) +
scale_color_manual(values = c("#440154", "#fde725")) +
scale_fill_manual(values = c("#440154", "#fde725")) +
xlab("Measurement type") +
ylab("Mean offline change score (ms)") +
scale_x_discrete(labels = c("Statistical learning", "Visuomotor performance")) +
theme_classic() +
labs(fill = "Group")
#ggsave("raincloud_study2_SL_VP.png")
ggplot(study2_SL_VP_long, aes(x = Learning_type, y = Learning_score, fill = factor(Group, levels = c("NTP", "ASD"))), show.legend = FALSE) +
geom_flat_violin(aes(fill = factor(Group, levels = c("NTP", "ASD"))), position = position_nudge(x = .1, y = 0), adjust = 1.5, trim = FALSE, alpha = .8, colour = NA, show.legend = TRUE) +
geom_point(aes(x = as.numeric(Learning_type) - .15, colour = factor(Group, levels = c("NTP", "ASD"))), position = position_jitter(width = .05), size = 1, shape = 20, show.legend = FALSE) +
geom_boxplot(aes(x = Learning_type, y = Learning_score, fill = factor(Group, levels = c("NTP", "ASD"))),outlier.shape = NA, alpha = .8, width = .1, colour = "black", show.legend = FALSE) +
scale_color_manual(values = c("#440154", "#fde725")) +
scale_fill_manual(values = c("#440154", "#fde725")) +
xlab("Measurement type") +
ylab("Mean offline change score (ms)") +
scale_x_discrete(labels = c("Statistical learning", "Visuomotor performance")) +
theme_classic() +
labs(fill = "Group")
#ggsave("raincloud_study2_SL_VP.png")
ggplot(study2_SL_VP_long, aes(x = Learning_type, y = Learning_score, fill = factor(Group, levels = c("NTP", "ASD"))), show.legend = FALSE) +
geom_flat_violin(aes(fill = factor(Group, levels = c("NTP", "ASD"))), position = position_nudge(x = .1, y = 0), adjust = 1.5, trim = FALSE, alpha = .8, colour = NA, show.legend = TRUE) +
geom_point(aes(x = as.numeric(Learning_type) - .15, colour = factor(Group, levels = c("NTP", "ASD"))), position = position_jitter(width = .05), size = 1, shape = 20, show.legend = FALSE) +
geom_boxplot(aes(x = Learning_type, y = Learning_score, fill = factor(Group, levels = c("NTP", "ASD"))),outlier.shape = NA, alpha = .8, width = .1, colour = "black", show.legend = FALSE) +
scale_color_manual(values = c("#440154", "#fde725")) +
scale_fill_manual(values = c("#440154", "#fde725")) +
xlab("Measurement type") +
ylab("Mean offline change score (ms)") +
scale_x_discrete(labels = c("Statistical learning", "Visuomotor performance")) +
theme_classic() +
labs(fill = "Group")
ggsave("raincloud_study2_SL_VP.png")
library(tidyverse)
library(rstatix)
library(readr)
library(dplyr)
library(car)
library(tidyverse)
library(sjPlot)
library(lme4)
library(performance)
library(nortest)
library(blme)
library(lmeresampler)
study1_SL <- read_csv("processed_data/study_1/data_study_1_SL_offline_online.csv")
study1_VP <- read_csv("processed_data/study_1/data_study_1_VP_offline_online.csv")
study2_SL <- read_csv("processed_data/study_2/data_study_2_SL_offline_online.csv")
study2_VP <- read_csv("processed_data/study_2/data_study_2_VP_offline_online.csv")
# make long dataset
study1_SL_long <- study1_SL %>%
select(c('Group', 'AQ_total', 'Subject', 'offline_SL'))
learning_phase <- c('offline_SL')
study1_SL_long <- pivot_longer(
data = study1_SL_long,
cols = learning_phase,
names_to = c("Learning_phase"),
values_to = "SL_score"
)
study1_SL_long <- study1_SL_long %>%
mutate(AQ_total_centered = scale(AQ_total, center = T, scale = F))
# make long dataset
study1_VP_long <- study1_VP %>%
select(c('Group', 'AQ_total', 'Subject', 'offline_VP'))
learning_phase <- c('offline_VP')
study1_VP_long <- pivot_longer(
data = study1_VP_long,
cols = learning_phase,
names_to = c("Learning_phase"),
values_to = "VP_score"
)
study1_VP_long <- study1_VP_long %>%
mutate(AQ_total_centered = scale(AQ_total, center = T, scale = F))
# make long dataset
study1_SL_long_block <- study1_SL %>%
select(c('Group', 'AQ_total', 'Subject', 'block2_offline','block3_offline', 'block4_offline','block5_offline', 'block6_offline','block7_offline', 'block8_offline','block9_offline', 'block10_offline',
'block11_offline', 'block12_offline','block13_offline', 'block14_offline','block15_offline', 'block16_offline', 'block17_offline','block18_offline', 'block19_offline','block20_offline', 'block21_offline', 'block22_offline','block23_offline', 'block24_offline','block25_offline'))
blocks <- c('block2','block3', 'block4','block5', 'block6','block7', 'block8','block9', 'block10',
'block11', 'block12','block13', 'block14','block15', 'block16', 'block17','block18',
'block19','block20', 'block21', 'block22','block23', 'block24','block25')
study1_SL_long_block <- pivot_longer(
data = study1_SL_long_block,
cols = starts_with(blocks),
names_to = c("Block"),
values_to = "SL_score"
)
study1_SL_long_block <- study1_SL_long_block %>%
mutate(Block = gsub('_offline', "", Block)) %>%
mutate(Block = gsub('block', "", Block))
study1_SL_long_block <- study1_SL_long_block %>%
mutate(Block = as.numeric(Block),
Block_centered = scale(Block, center = T, scale = F),
AQ_total_centered = scale(AQ_total, center = T, scale = F))
# make long dataset
study1_VP_long_block <- study1_VP %>%
select(c('Group', 'AQ_total', 'Subject', 'block2_offline','block3_offline', 'block4_offline','block5_offline', 'block6_offline','block7_offline', 'block8_offline','block9_offline', 'block10_offline',
'block11_offline', 'block12_offline','block13_offline', 'block14_offline','block15_offline', 'block16_offline', 'block17_offline','block18_offline', 'block19_offline','block20_offline', 'block21_offline', 'block22_offline','block23_offline', 'block24_offline','block25_offline'))
blocks <- c('block2','block3', 'block4','block5', 'block6','block7', 'block8','block9', 'block10',
'block11', 'block12','block13', 'block14','block15', 'block16', 'block17','block18',
'block19','block20', 'block21', 'block22','block23', 'block24','block25')
study1_VP_long_block <- pivot_longer(
data = study1_VP_long_block,
cols = starts_with(blocks),
names_to = c("Block"),
values_to = "VP_score"
)
study1_VP_long_block <- study1_VP_long_block %>%
mutate(Block = gsub('_offline', "", Block)) %>%
mutate(Block = gsub('block', "", Block))
study1_VP_long_block <- study1_VP_long_block %>%
mutate(Block = as.numeric(Block),
Block_centered = scale(Block, center = T, scale = F),
AQ_total_centered = scale(AQ_total, center = T, scale = F))
# make long dataset
study2_SL_long <- study2_SL %>%
select(c('Group', 'Subject', 'offline_SL'))
learning_phase <- c('offline_SL')
study2_SL_long <- pivot_longer(
data = study2_SL_long,
cols = learning_phase,
names_to = c("Learning_phase"),
values_to = "SL_score"
)
# make long dataset
study2_VP_long <- study2_VP %>%
select(c('Group', 'Subject', 'offline_VP'))
learning_phase <- c('offline_VP')
study2_VP_long <- pivot_longer(
data = study2_VP_long,
cols = learning_phase,
names_to = c("Learning_phase"),
values_to = "VP_score"
)
# make long dataset
study2_SL_long_block <- study2_SL %>%
select(c('Group', 'Subject', 'block2_offline','block3_offline', 'block4_offline','block5_offline', 'block6_offline','block7_offline', 'block8_offline','block9_offline', 'block10_offline',
'block11_offline', 'block12_offline','block13_offline', 'block14_offline','block15_offline', 'block16_offline', 'block17_offline','block18_offline', 'block19_offline','block20_offline'))
blocks <- c('block2','block3', 'block4','block5', 'block6','block7', 'block8','block9', 'block10',
'block11', 'block12','block13', 'block14','block15', 'block16', 'block17','block18',
'block19','block20')
study2_SL_long_block <- pivot_longer(
data = study2_SL_long_block,
cols = starts_with(blocks),
names_to = c("Block"),
values_to = "SL_score"
)
study2_SL_long_block <- study2_SL_long_block %>%
mutate(Block = gsub('_offline', "", Block)) %>%
mutate(Block = gsub('block', "", Block))
# make long dataset
study2_VP_long_block <- study2_VP %>%
select(c('Group', 'Subject', 'block2_offline','block3_offline', 'block4_offline','block5_offline', 'block6_offline','block7_offline', 'block8_offline','block9_offline', 'block10_offline',
'block11_offline', 'block12_offline','block13_offline', 'block14_offline','block15_offline', 'block16_offline', 'block17_offline','block18_offline', 'block19_offline','block20_offline'))
blocks <- c('block2','block3', 'block4','block5', 'block6','block7', 'block8','block9', 'block10',
'block11', 'block12','block13', 'block14','block15', 'block16', 'block17','block18',
'block19','block20')
study2_VP_long_block <- pivot_longer(
data = study2_VP_long_block,
cols = starts_with(blocks),
names_to = c("Block"),
values_to = "VP_score"
)
study2_VP_long_block <- study2_VP_long_block %>%
mutate(Block = gsub('_offline', "", Block)) %>%
mutate(Block = gsub('block', "", Block))
# normality test
shapiro_test(study2_SL_long$SL_score)
# homogeneity of variance test
var.test(SL_score ~ Group, data = study2_SL_long)
# t-test
anova(SL_score ~ Group, data = study2_SL_long, var.equal = T)
# normality test
shapiro_test(study2_SL_long$SL_score)
# homogeneity of variance test
var.test(SL_score ~ Group, data = study2_SL_long)
# t-test
anova_test(SL_score ~ Group, data = study2_SL_long)
cohens_d(study2_SL_long, SL_score ~ 1)
# normality test
#shapiro_test(study2_SL_long$SL_score)
# homogeneity of variance test
#var.test(SL_score ~ Group, data = study2_SL_long)
# t-test
anova_test(SL_score ~ Group, data = study2_SL_long)
#cohens_d(study2_SL_long, SL_score ~ 1)
